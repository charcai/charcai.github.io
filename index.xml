<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Charactex's Blog</title><link>https://charactex.com/</link><description>Recent content on Charactex's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://charactex.com/index.xml" rel="self" type="application/rss+xml"/><item><title>北航软工: 面向对象程序设计 Lab02</title><link>https://charactex.com/post/2024/11/oop-lab02/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>https://charactex.com/post/2024/11/oop-lab02/</guid><description>&lt;h1 id="lab-02-assignment">Lab 02 Assignment
&lt;/h1>&lt;blockquote>
&lt;p>题面与所有提及的文件均保存在作者的GitHub中，&lt;a class="link" href="https://github.com/charcai/BUAA-OOP-2024/tree/main/Lab02" target="_blank" rel="noopener"
>点击这里&lt;/a>查看。&lt;/p>
&lt;/blockquote>
&lt;h2 id="question-01">Question 01
&lt;/h2>&lt;h4 id="1-注释标记的哪些行会导致编译错误将错误截图并说明原因">1. 注释标记的哪些行会导致编译错误？&lt;strong>将错误截图，并说明原因&lt;/strong>。
&lt;/h4>&lt;p>第 4 行会编译错误。&lt;/p>
&lt;p>&lt;img src="https://charactex.com/post/2024/11/oop-lab02/Q01.png"
width="1164"
height="232"
srcset="https://charactex.com/post/2024/11/oop-lab02/Q01_hu17032442000326604195.png 480w, https://charactex.com/post/2024/11/oop-lab02/Q01_hu10325693223605987935.png 1024w"
loading="lazy"
alt="error"
class="gallery-image"
data-flex-grow="501"
data-flex-basis="1204px"
>&lt;/p>
&lt;p>在方法中声明的变量需手动设置初始值后方可正常调用，此处 &lt;code>m&lt;/code> 没有赋初始值。&lt;/p>
&lt;h4 id="2-区分变量-x-和-m-回答谁需要初始化才能使用为什么">2. 区分变量 &lt;code>x&lt;/code> 和 &lt;code>m&lt;/code> ，&lt;strong>回答谁需要初始化才能使用，为什么&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;code>m&lt;/code>需要初始化才能使用，因为它是声明在方法中的局部变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>x&lt;/code>不需初始化即可使用，因为它是声明在类中的全局变量。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="question-02">Question 02
&lt;/h2>&lt;h4 id="a-overloadint-m-与-overloaddouble-m-互为重载的构造方法">a. &lt;code>Overload(int m)&lt;/code> 与 &lt;code>Overload(double m)&lt;/code> 互为重载的构造方法。
&lt;/h4>&lt;p>&lt;strong>正确。&lt;/strong>&lt;/p>
&lt;h4 id="b-int-overloadint-m-与-void-overloaddouble-m-互为重载的非构造方法">b. &lt;code>int Overload(int m)&lt;/code> 与 &lt;code>void Overload(double m)&lt;/code> 互为重载的非构造方法。
&lt;/h4>&lt;p>&lt;strong>正确。&lt;/strong>&lt;/p>
&lt;h4 id="c-overload-类有-2-个构造方法尝试调用默认构造方法-overload-会无法通过编译">c. &lt;code>Overload&lt;/code> 类有 2 个构造方法，尝试调用默认构造方法 &lt;code>Overload()&lt;/code> 会无法通过编译。
&lt;/h4>&lt;p>&lt;strong>正确。&lt;/strong>&lt;/p>
&lt;h4 id="d-overload-类有-3-个构造方法">d. &lt;code>Overload&lt;/code> 类有 3 个构造方法。
&lt;/h4>&lt;p>&lt;strong>错误&lt;/strong>。构造方法无返回值类型，只有前两个方法是合法的构造方法。&lt;/p>
&lt;h2 id="question-03">Question 03
&lt;/h2>&lt;p>输出：&lt;/p>
&lt;pre tabindex="0">&lt;code>initialize A1
initialize A2
initialize A3
initialize A4
initialize A5
initialize A6
copy from A6
initialize B1
initialize A8
main begins
initialize A9
initialize A6
copy from A6
initialize B2
initialize A8
main ends
&lt;/code>&lt;/pre>&lt;h2 id="question-04">Question 04
&lt;/h2>&lt;h4 id="1-这段代码能够证明在属性定义处初始化的属性比在方法中初始化的属性先被初始化吗">1. 这段代码能够证明“在属性定义处初始化的属性，比在方法中初始化的属性先被初始化”吗？
&lt;/h4>&lt;p>&lt;strong>能。&lt;/strong> &lt;code>a7&lt;/code>在属性定义处初始化，&lt;code>a8&lt;/code>在方法中初始化，尽管&lt;code>a7&lt;/code>出现于&lt;code>a8&lt;/code>之后，依然被先初始化。&lt;/p>
&lt;h4 id="2-这段代码能够证明在属性定义处初始化的属性初始化顺序等同于他们在类定义">2. 这段代码能够证明“在属性定义处初始化的属性，初始化顺序等同于他们在类定义
&lt;/h4>&lt;p>中出现的顺序”吗？&lt;/p>
&lt;p>&lt;strong>能。&lt;/strong> &lt;code>a6&lt;/code>、&lt;code>a7&lt;/code>两个非静态属性先后出现，二者也是按照出现顺序先后被初始化。&lt;/p>
&lt;h2 id="question-05">Question 05
&lt;/h2>&lt;p>静态属性的初始化顺序均与出现顺序相同，无论是静态变量还是静态初始化块。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>静态变量&lt;/strong> 静态变量在类加载时初始化。它们按照在类中出现的顺序进行初始化。&lt;/li>
&lt;li>&lt;strong>静态初始化块&lt;/strong> 静态初始化块在静态变量初始化同时执行。多个静态初始化块按照它们在类中出现的顺序依次执行。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>a3&lt;/code>, &lt;code>a4&lt;/code>, &lt;code>a5&lt;/code>中，&lt;code>a3&lt;/code>，&lt;code>a5&lt;/code>是静态变量、&lt;code>a4&lt;/code>在静态初始化块中被初始化，三者均按照出现顺序&lt;code>a3&lt;/code> - &lt;code>a4&lt;/code> - &lt;code>a5&lt;/code>被初始化。&lt;/p>
&lt;h2 id="question-06">Question 06
&lt;/h2>&lt;h4 id="1-这段代码能够证明在类的实例第一次被构造或类的静态属性和静态方法第一次被访问时jvm-会执行类加载吗如果不能请尝试修改代码并证明">1. 这段代码能够证明“在类的实例第一次被构造、或类的静态属性和静态方法第一次被访问时，JVM 会执行类加载”吗？如果不能，请尝试修改代码并证明。
&lt;/h4>&lt;p>&lt;strong>不能。&lt;/strong> 需要在每个类的起始处打印执行的提示信息，修改后的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Class A is being loaded&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> A a1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;initialize A&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>(A a) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;copy from A&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> a.&lt;span style="color:#a6e22e">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> a.&lt;span style="color:#a6e22e">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> A a2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Class B is being loaded&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A a8;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A a7 = new A(a6);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A a6 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(6);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> A a3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> A a4;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> A a5 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(5);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;initialize B&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(8);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A a7 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(a6);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Initialization&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Class Initialization is being loaded&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> B b1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> B(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> B b2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;main begins&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A a9 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A(9);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> B(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;main ends&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该程序编译运行后输出结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>Class Initialization is being loaded
Class B is being loaded
Class A is being loaded
initialize A1
initialize A2
initialize A3
initialize A4
initialize A5
initialize A6
copy from A6
initialize B1
initialize A8
main begins
initialize A9
initialize A6
copy from A6
initialize B2
initialize A8
main ends
&lt;/code>&lt;/pre>&lt;p>由前三行可知，类被加载的顺序是&lt;code>Initialization&lt;/code>, &lt;code>B&lt;/code>, &lt;code>A&lt;/code>, 与三者第一次被加载的顺序一致，故可以证明“在类的实例第一次被构造、或类的静态属性和静态方法第一次被访问时，JVM 会执行类加载”。&lt;/p>
&lt;h4 id="2-基于static关键字带有static关键字的方法变量代码块可以调用什么反过来不带有static关键字的方法变量代码块可以调用什么带有static关键字的方法变量-or-不带有static关键字的方法变量-or-都可以">2. 基于&lt;code>static&lt;/code>关键字，带有&lt;code>static&lt;/code>关键字的方法、变量、代码块可以调用什么？反过来，不带有&lt;code>static&lt;/code>关键字的方法、变量、代码块可以调用什么？(带有&lt;code>static&lt;/code>关键字的方法、变量 or 不带有&lt;code>static&lt;/code>关键字的方法、变量 or 都可以)
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>带有&lt;code>static&lt;/code>关键字的方法、变量、代码块只能调用其他带有&lt;code>static&lt;/code>关键字的方法、变量、代码块。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不带有&lt;code>static&lt;/code>关键字的方法、变量、代码块可以调用带有&lt;code>static&lt;/code>关键字的方法、变量、代码块，也可以调用其他不带&lt;code>static&lt;/code>关键字的方法、变量、代码块。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="question-07">Question 07
&lt;/h2>&lt;p>不可以，其他的外部类不能通过 &lt;code>new Singleton()&lt;/code> 来构造一个新的 &lt;code>Singleton&lt;/code> 变量。&lt;/p>
&lt;h2 id="question-08">Question 08
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>因为 &lt;code>Singleton&lt;/code> 类的构造方法是私有的，此类只能在 &lt;code>Singleton&lt;/code> 类的内部被调用。外部类无法访问这个私有构造方法，因此无法创造更多实例，最多只可能有由 &lt;code>Singleton&lt;/code> 类自己创造的 1 个实例同时存在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>唯一实例在第一次调用 &lt;code>getInstance()&lt;/code> 方法时被构造。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="question-09">Question 09
&lt;/h2>&lt;p>下列代码可以从外部调用 &lt;code>Singleton&lt;/code> 类的 &lt;code>foo()&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestSingleton&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取 Singleton 类的唯一实例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Singleton singletonInstance &lt;span style="color:#f92672">=&lt;/span> Singleton.&lt;span style="color:#a6e22e">getInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 调用 Singleton 类的 foo() 方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> singletonInstance.&lt;span style="color:#a6e22e">foo&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="question-10">Question 10
&lt;/h2>&lt;p>代码见&lt;code>./Q10/TestPerson.java&lt;/code>, &lt;a class="link" href="https://github.com/charcai/BUAA-OOP-2024/blob/main/Lab02/23373381-%e8%94%a1%e5%bd%a6%e6%81%92-Lab02/Q10/TestPerson.java" target="_blank" rel="noopener"
>点此跳转&lt;/a>&lt;/p>
&lt;h2 id="question-11">Question 11
&lt;/h2>&lt;p>代码见&lt;code>./Q11/Solution.java&lt;/code>, &lt;a class="link" href="https://github.com/charcai/BUAA-OOP-2024/tree/main/Lab02/23373381-%e8%94%a1%e5%bd%a6%e6%81%92-Lab02/Q11/Solution.java" target="_blank" rel="noopener"
>点此跳转&lt;/a>&lt;/p></description></item><item><title>北航软工: 面向对象程序设计 Lab01</title><link>https://charactex.com/post/2024/11/oop-lab01/</link><pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate><guid>https://charactex.com/post/2024/11/oop-lab01/</guid><description>&lt;blockquote>
&lt;p>题面与所有提及的文件均保存在作者的GitHub中，&lt;a class="link" href="https://github.com/charcai/BUAA-OOP-2024/tree/main/Lab01" target="_blank" rel="noopener"
>点击这里&lt;/a>查看。&lt;/p>
&lt;/blockquote>
&lt;h1 id="lab-01-assignment">Lab 01 Assignment
&lt;/h1>&lt;h2 id="question-01">Question 01
&lt;/h2>&lt;p>包名命名为&lt;code>Q1&lt;/code>，在命令行使用&lt;code>javac Q1/Main.java&lt;/code>命令编译，并使用&lt;code>java Q1.Main&lt;/code>命令运行生成的字节码。&lt;/p>
&lt;p>&lt;img src="https://charactex.com/post/2024/11/oop-lab01/Q1.png"
width="1144"
height="746"
srcset="https://charactex.com/post/2024/11/oop-lab01/Q1_hu13775894045122961406.png 480w, https://charactex.com/post/2024/11/oop-lab01/Q1_hu10737756119924337100.png 1024w"
loading="lazy"
alt="Q1"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;h2 id="question-02">Question 02
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>基本类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>默认值&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>基本类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>默认值&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>byte&lt;/strong>&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">&lt;strong>boolean&lt;/strong>&lt;/td>
&lt;td style="text-align: center">false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>short&lt;/strong>&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">&lt;strong>char&lt;/strong>&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>int&lt;/strong>&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">&lt;strong>float&lt;/strong>&lt;/td>
&lt;td style="text-align: center">0.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>long&lt;/strong>&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">&lt;strong>double&lt;/strong>&lt;/td>
&lt;td style="text-align: center">0.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>代码实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">short&lt;/span> s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> l;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> bool;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">float&lt;/span> f;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Main m &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Main();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;byte: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m.&lt;span style="color:#a6e22e">b&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;short: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m.&lt;span style="color:#a6e22e">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;int: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m.&lt;span style="color:#a6e22e">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;long: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m.&lt;span style="color:#a6e22e">l&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;bool: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m.&lt;span style="color:#a6e22e">bool&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;char: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>)m.&lt;span style="color:#a6e22e">c&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;float: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m.&lt;span style="color:#a6e22e">f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;double: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m.&lt;span style="color:#a6e22e">d&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存在&lt;code>./Q2/Main.java&lt;/code>。&lt;/p>
&lt;h2 id="question-03">Question 03
&lt;/h2>&lt;p>初步体现了面向对象编程思想，代码实现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FindMinMax&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> d1 &lt;span style="color:#f92672">=&lt;/span> 1, d2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>9.&lt;span style="color:#a6e22e">9&lt;/span>, d3 &lt;span style="color:#f92672">=&lt;/span> 96.&lt;span style="color:#a6e22e">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> d1 &lt;span style="color:#f92672">&amp;gt;&lt;/span> d2&lt;span style="color:#f92672">?&lt;/span> d1 : d2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (tmp &lt;span style="color:#f92672">&amp;gt;&lt;/span> d3&lt;span style="color:#f92672">?&lt;/span> tmp : d3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> d1 &lt;span style="color:#f92672">&amp;lt;&lt;/span> d2&lt;span style="color:#f92672">?&lt;/span> d1 : d2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (tmp &lt;span style="color:#f92672">&amp;lt;&lt;/span> d3&lt;span style="color:#f92672">?&lt;/span> tmp : d3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;max = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> max());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;min = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> min());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存在&lt;code>./Q3/FindMinMax.java&lt;/code>，运行结果：&lt;/p>
&lt;p>&lt;img src="https://charactex.com/post/2024/11/oop-lab01/Q3.png"
width="1146"
height="746"
srcset="https://charactex.com/post/2024/11/oop-lab01/Q3_hu14697101989928571216.png 480w, https://charactex.com/post/2024/11/oop-lab01/Q3_hu16488890443452790248.png 1024w"
loading="lazy"
alt="Q3"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;pre tabindex="0">&lt;code>max = 96.9
min = -9.9
&lt;/code>&lt;/pre>&lt;h2 id="question-04">Question 04
&lt;/h2>&lt;p>运行结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>1
2
b is false
&lt;/code>&lt;/pre>&lt;p>在main方法中，首先执行&lt;code>test1(0)&lt;/code>，函数打印&lt;code>1&lt;/code>并返回&lt;code>0 &amp;lt; 1&lt;/code>的boolean值&lt;code>true&lt;/code>；&lt;/p>
&lt;p>其次执行&lt;code>test2(2)&lt;/code>，函数打印&lt;code>2&lt;/code>并返回 &lt;code>2 &amp;lt; 2&lt;/code> 的boolean值 &lt;code>false&lt;/code> 。&lt;/p>
&lt;p>因为 &lt;code>test2(2)&lt;/code> 为 &lt;code>false&lt;/code> ，故 &lt;code>b = test1(0) &amp;amp;&amp;amp; test2(2) &amp;amp;&amp;amp; test3(2)&lt;/code> 一定为&lt;code>false&lt;/code>。由于短路机制的存在，将不会继续运行&lt;code>test3(2)&lt;/code>函数，故没有在屏幕上输出&lt;code>3&lt;/code>。&lt;/p>
&lt;h2 id="question-05">Question 05
&lt;/h2>&lt;h4 id="1-上述源文件的名字是什么">1. 上述源文件的名字是什么？
&lt;/h4>&lt;p>答：&lt;code>Student.java&lt;/code>&lt;/p>
&lt;h4 id="2-编译上述源文件将生成几个字节码文件这些字节码文件的名字都是什么">2. 编译上述源文件将生成几个字节码文件？这些字节码文件的名字都是什么？
&lt;/h4>&lt;p>答：生成 2 个字节码文件，文件名分别为&lt;code>Student.class&lt;/code>与&lt;code>Exam.class&lt;/code>。&lt;/p>
&lt;h4 id="3-执行以下命令并输出结果">3. 执行以下命令并输出结果
&lt;/h4>&lt;h5 id="1在命令行执行-java-student-得到怎样的错误提示">（1）在命令行执行 &lt;code>java Student&lt;/code> 得到怎样的错误提示？
&lt;/h5>&lt;pre tabindex="0">&lt;code>Error: Main method not found in class Student, please define the main method as:
public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application
&lt;/code>&lt;/pre>&lt;h5 id="2执行-java-exam-得到怎样的错误提示">（2）执行 &lt;code>java exam&lt;/code> 得到怎样的错误提示？
&lt;/h5>&lt;pre tabindex="0">&lt;code>Error: Could not find or load main class exam
Caused by: java.lang.NoClassDefFoundError: exam (wrong name: Q5/Exam)
&lt;/code>&lt;/pre>&lt;h5 id="3执行-java-examclass-得到怎样的错误提示">（3）执行 &lt;code>java Exam.class&lt;/code> 得到怎样的错误提示？
&lt;/h5>&lt;pre tabindex="0">&lt;code>Error: Could not find or load main class Exam.class
Caused by: java.lang.ClassNotFoundException: Exam.class
&lt;/code>&lt;/pre>&lt;h5 id="4执行-java-exam-得到怎样的输出结果">（4）执行 &lt;code>java Exam&lt;/code> 得到怎样的输出结果？
&lt;/h5>&lt;pre tabindex="0">&lt;code>I am studying Java.
&lt;/code>&lt;/pre>&lt;h2 id="question-06">Question 06
&lt;/h2>&lt;p>代码见&lt;code>./Q6/TwoDimensionArray.java&lt;/code>&lt;/p>
&lt;p>运行结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>b[0][0] = 1000
sum = 1139
b.lengh = 3
arr1:
0 1 2 3
4 5 6 7
8 9 10 11
arr2:
0 1 2
3 4 5 6
7 8 9 10 11
arr3:
0 1 2
3 4 5
6 7 8
&lt;/code>&lt;/pre>&lt;h2 id="question-07">Question 07
&lt;/h2>&lt;h4 id="题设代码">题设代码：
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SwitchExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span> (String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> 4; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> 1: c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;J&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">print&lt;/span>(c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> 2: c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;e&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">print&lt;/span>(c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> 3: c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">print&lt;/span>(c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>: System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;好&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="运行结果">运行结果：
&lt;/h4>&lt;pre tabindex="0">&lt;code>Jeep好好
&lt;/code>&lt;/pre>&lt;h4 id="原因分析">原因分析：
&lt;/h4>&lt;p>&lt;code>i = 1&lt;/code>时，&lt;code>switch-case&lt;/code>语句进入&lt;code>case 1&lt;/code>，输出&lt;code>J&lt;/code>；由于没有break语句，继续向下执行，输出&lt;code>e&lt;/code>，然后break跳出&lt;code>switch-case&lt;/code>，继续下一轮循环。&lt;/p>
&lt;p>&lt;code>i = 2&lt;/code>时，&lt;code>switch-case&lt;/code>语句进入&lt;code>case 2&lt;/code>，输出&lt;code>e&lt;/code>，之后遇到&lt;code>break&lt;/code>语句，跳出&lt;code>switch-case&lt;/code>，继续下一轮循环。&lt;/p>
&lt;p>&lt;code>i = 3&lt;/code>时，&lt;code>switch-case&lt;/code>语句进入&lt;code>case 3&lt;/code>，输出&lt;code>p&lt;/code>；由于没有break语句，继续向下执行&lt;code>default&lt;/code>的内容，输出&lt;code>好&lt;/code>。&lt;/p>
&lt;p>&lt;code>i = 4&lt;/code>时，&lt;code>switch-case&lt;/code>语句进入&lt;code>default&lt;/code>，输出&lt;code>好&lt;/code>；之后到达&lt;code>switch-case&lt;/code>末尾，不再执行。&lt;/p>
&lt;p>故输出为&lt;code>Jeep好好&lt;/code>。&lt;/p>
&lt;h2 id="question-08">Question 08
&lt;/h2>&lt;p>代码见&lt;code>./Q8/nDimension.java&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Scanner;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">nDimension&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Scanner input &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Scanner(System.&lt;span style="color:#a6e22e">in&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> input.&lt;span style="color:#a6e22e">nextInt&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> cnt &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> 1; j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n; j&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">print&lt;/span>(&lt;span style="color:#f92672">++&lt;/span>cnt &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>输入5
&lt;img src="https://charactex.com/Q8/1.png"
loading="lazy"
alt="1.png"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入8
&lt;img src="https://charactex.com/Q8/2.png"
loading="lazy"
alt="2.png"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="question-09">Question 09
&lt;/h2>&lt;p>代码见&lt;code>./Q9/sort.java&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jav" data-lang="jav">public class sort {
public static int[] qsort(int[] arr) {
if(arr == null) {
return null;
}
if(arr.length &amp;lt;= 1) {
return arr;
}
int temp;
for (int j = 0; j &amp;lt; arr.length - 1; j++) {
for (int i = 0; i &amp;lt; arr.length - 1 - j; i++) {
if (arr[i] &amp;gt; arr[i + 1]) {
temp = arr[i];
arr[i] = arr[i + 1];
arr[i + 1] = temp;
}
}
}
return arr;
}
public static void main(String[] args) {
int[] arr = new int[]{1, 3, 5, 7, 9, 2, 4, 6, 8};
qsort(arr);
for (int j : arr) {
System.out.print(j + &amp;#34; &amp;#34;);
}
}
}
&lt;/code>&lt;/pre>&lt;h2 id="question-10">Question 10
&lt;/h2>&lt;h4 id="1-指出代码中注释标注出的四行输出的内容会是什么">(1) 指出代码中注释标注出的四行输出的内容会是什么
&lt;/h4>&lt;ol>
&lt;li>p1 的 x, y 坐标: 1111, 2222&lt;/li>
&lt;li>p2 的 x, y 坐标: -100, -200&lt;/li>
&lt;li>p1 的 x, y 坐标: 0, 0&lt;/li>
&lt;li>p2 的 x, y 坐标: 0, 0&lt;/li>
&lt;/ol>
&lt;h4 id="2-什么是浅拷贝什么是深拷贝请你查阅一些资料并给出你的资讯">(2) 什么是浅拷贝？什么是深拷贝？请你查阅一些资料，并给出你的资讯。
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>浅拷贝是指创建一个新对象，这个新对象的字段包含了原对象字段的精确副本，若字段是引用类型则复制地址，故对引用对象的操作会影响原对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浅拷贝是指创建一个新对象，递归地复制所有引用类型字段所引用的对象。即使字段是引用类型，也会创建一个新副本，对其所有更改均不会影响原来的对象。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="3-如果你要为一个类实现-copy-方法思考如何避免引用间赋值导致的浅拷贝或者说如何确保进行的是深拷贝">(3) 如果你要为一个类实现 copy() 方法，思考如何避免引用间赋值导致的浅拷贝？或者说，如何确保进行的是深拷贝。
&lt;/h4>&lt;p>可以在类中定义一个复制构造函数，通过该构造函数手动复制所有引用类型字段。&lt;/p>
&lt;h4 id="解释string的--和-equals-的区别">解释String的 == 和 equals() 的区别。
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;code>==&lt;/code>仅检查引用的地址是否相同，即它们是否指向同一个对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>equals()&lt;/code>检查字符串内容是否相同。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="question-11">Question 11
&lt;/h2>&lt;p>代码见&lt;code>./Q11/Variable.java&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> Q11;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Variable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String &lt;span style="color:#a6e22e">strscat&lt;/span>(String... args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String ss &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(String x : args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#f92672">=&lt;/span> ss &lt;span style="color:#f92672">+&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(strscat(&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;e&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(strscat(&lt;span style="color:#e6db74">&amp;#34;str&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1-尝试理解-java-可变参数的实现机制说说你的想法">(1) 尝试理解 Java 可变参数的实现机制，说说你的想法。
&lt;/h4>&lt;p>可变参数实际上是将参数自动打包作为数组传递给方法。&lt;/p>
&lt;h4 id="2-调用-strscatnew-stringa-b-能通过编译吗为什么">(2) 调用 strscat(new String[]{&amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;}) 能通过编译吗？为什么？
&lt;/h4>&lt;p>可以。本质上即手动将可变个参数打包为参数数组传递给方法。&lt;/p>
&lt;h4 id="3-如果还有静态方法-string-strscatstring-args-同时存在代码能通过编译吗给出-ide-的编译结果的截图">(3) 如果还有静态方法 String strscat(String[] args) 同时存在，代码能通过编译吗？给出 IDE 的编译结果的截图。
&lt;/h4>&lt;p>不能通过编译。&lt;/p>
&lt;p>&lt;img src="https://charactex.com/Q11/Q11.png"
loading="lazy"
alt="Q11"
>&lt;/p>
&lt;h4 id="4-如果我们声明的是-string-strscatstring-argsstrscata-b-c-这样的调用还能通过编译吗给出-ide-的编译结果的截图">(4) 如果我们声明的是 String strscat(String[] args)，strscat(&amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;c&amp;rdquo;) 这样的调用还能通过编译吗？给出 IDE 的编译结果的截图。
&lt;/h4>&lt;p>&lt;img src="https://charactex.com/Q11/Q11_2.png"
loading="lazy"
alt="Q11_2"
>&lt;/p>
&lt;h2 id="question-12">Question 12
&lt;/h2>&lt;p>样例运行结果：&lt;/p>
&lt;p>&lt;img src="https://charactex.com/res.png"
loading="lazy"
alt="res"
>&lt;/p>
&lt;p>代码见&lt;code>./Q12/BigNumberAddition.java&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> Q12;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.math.BigInteger;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Scanner;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BigNumberAddition&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Scanner scanner &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Scanner(System.&lt;span style="color:#a6e22e">in&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BigInteger a &lt;span style="color:#f92672">=&lt;/span> scanner.&lt;span style="color:#a6e22e">nextBigInteger&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BigInteger b &lt;span style="color:#f92672">=&lt;/span> scanner.&lt;span style="color:#a6e22e">nextBigInteger&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 计算它们的和&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BigInteger sum &lt;span style="color:#f92672">=&lt;/span> a.&lt;span style="color:#a6e22e">add&lt;/span>(b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 输出结果&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(sum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="question-13">Question 13
&lt;/h2>&lt;p>代码见&lt;code>./Q13/Test.java&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> Q13;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">buyer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">buyer&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">buy&lt;/span>(String thing) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; 买了 &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> thing);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">chef&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">chef&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">cook&lt;/span>(String thing) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; 做好了 &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> thing);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buyer aunt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> buyer(&lt;span style="color:#e6db74">&amp;#34;姑姑&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buyer mom &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> buyer(&lt;span style="color:#e6db74">&amp;#34;妈妈&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buyer self &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> buyer(&lt;span style="color:#e6db74">&amp;#34;自己&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chef dad &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> chef(&lt;span style="color:#e6db74">&amp;#34;爸爸&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chef auntie &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> chef(&lt;span style="color:#e6db74">&amp;#34;婶婶&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aunt.&lt;span style="color:#a6e22e">buy&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;鱼&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mom.&lt;span style="color:#a6e22e">buy&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;羊肉&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.&lt;span style="color:#a6e22e">buy&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;蔬菜&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dad.&lt;span style="color:#a6e22e">cook&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;葱爆羊肉&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auntie.&lt;span style="color:#a6e22e">cook&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;豆腐鱼汤&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Archives</title><link>https://charactex.com/page/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://charactex.com/page/archives/</guid><description/></item><item><title>C++ STL之priority_queue优先队列</title><link>https://charactex.com/post/2018/06/priority_queue/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://charactex.com/post/2018/06/priority_queue/</guid><description>&lt;h1 id="介绍">介绍
&lt;/h1>&lt;p>priority_queue, 又称优先队列，是C++ STL库的重要组成部分之一。&lt;br>
priority_queue的定义在头文件&lt;code>&amp;lt;queue&amp;gt;&lt;/code>中，因此需要:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它允许用户为队列中元素设置优先级，放置元素的时候不是直接放到队尾，而是放置到比它优先级低的元素前面，标准库默认使用 &amp;lt; 操作符来确定优先级关系。&lt;/p>
&lt;p>它的原型是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Container&lt;/span> &lt;span style="color:#f92672">=&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Compare&lt;/span> &lt;span style="color:#f92672">=&lt;/span> less&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> Container&lt;span style="color:#f92672">::&lt;/span>value_type&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">priority_queue&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中第一个为元素类型；第二个为承载优先队列的容器类型，一般是vector；第三个是比较函数。但由于后两个已经带有默认值，所以一般使用时只需要&lt;code>priority_queue&amp;lt;int&amp;gt;&lt;/code>这样就行了。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->注：优先队列的优先级关系为值大的优先级高、值小的优先级低，而优先级高的放在队列前面，所以对于默认类型，它的内部元素总是从大到小的。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="常用操作">常用操作
&lt;/h1>&lt;ul>
&lt;li>压入: &lt;code>push()&lt;/code>&lt;/li>
&lt;li>弹出: &lt;code>pop()&lt;/code>&lt;/li>
&lt;li>取队首元素: &lt;code>top()&lt;/code> //与一般的队列不一样，不用&lt;code>front()&lt;/code>&lt;/li>
&lt;li>判空: &lt;code>empty()&lt;/code>&lt;/li>
&lt;li>取大小: &lt;code>size&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="样例程序">样例程序
&lt;/h1>&lt;h2 id="系统类型">系统类型
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//程序1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>priority_queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(&lt;span style="color:#ae81ff">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(&lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(&lt;span style="color:#ae81ff">9&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> q.size() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">!&lt;/span>q.empty())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> q.top() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段程序的输出是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自定义类型">自定义类型
&lt;/h2>&lt;p>使用自定义类型，就要重载&lt;code>&amp;lt;&lt;/code>运算符了。&lt;/p>
&lt;p>例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//程序2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> (node x) &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#75715e">//const不能少
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> value &lt;span style="color:#f92672">&amp;lt;&lt;/span> x.value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node(&lt;span style="color:#66d9ef">int&lt;/span> _v)&lt;span style="color:#f92672">:&lt;/span> value(_v) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> priority_queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>node&lt;span style="color:#f92672">&amp;gt;&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(node(&lt;span style="color:#ae81ff">3&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(node(&lt;span style="color:#ae81ff">5&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(node(&lt;span style="color:#ae81ff">10&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> q.size() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#f92672">!&lt;/span>q.empty())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node tmp &lt;span style="color:#f92672">=&lt;/span> q.top();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> tmp.value &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="改变优先级">改变优先级
&lt;/h1>&lt;h2 id="系统类型-1">系统类型
&lt;/h2>&lt;p>很多时候，我们需要由小到大排序，这时候就需要这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>priority_queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, greater&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>pq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//三个int要一致！
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：最后两个&lt;code>&amp;gt;&lt;/code>号千万不要写在一起，否则有可能被编译器误认为是&lt;code>&amp;gt;&amp;gt;&lt;/code>运算符！&lt;/p>
&lt;p>如果以这行代码替换上面程序1里的定义的话，运行结果就会是这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自定义类型-1">自定义类型
&lt;/h2>&lt;p>自定义类型也是一个道理，但要重载&lt;code>&amp;gt;&lt;/code>运算符：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> (node x) &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> value &lt;span style="color:#f92672">&amp;gt;&lt;/span> x.value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node(&lt;span style="color:#66d9ef">int&lt;/span> _v)&lt;span style="color:#f92672">:&lt;/span> value(_v) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>priority_queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>node, vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>node&lt;span style="color:#f92672">&amp;gt;&lt;/span>, greater&lt;span style="color:#f92672">&amp;lt;&lt;/span>node&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//三个node也要一样！
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>替换程序2相关内容，输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Links</title><link>https://charactex.com/page/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://charactex.com/page/links/</guid><description/></item><item><title>Search</title><link>https://charactex.com/page/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://charactex.com/page/search/</guid><description/></item></channel></rss>